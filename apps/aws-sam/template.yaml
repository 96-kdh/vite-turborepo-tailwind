AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template – Aurora Serverless v2 (provisioned) + Public VPC + AppSync with JS resolver

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 10
    MemorySize: 256
    Architectures:
      - x86_64
#    VpcConfig:
#      SecurityGroupIds:
#        - !Ref DBSecurityGroup
#      SubnetIds:
#        - !Ref AppSubnet1
#        - !Ref AppSubnet2

Parameters:
  DBClusterName:
    Type: String
    Default: aurora-test-cluster
  DatabaseName:
    Type: String
    Default: aurora_test_db
  DBAdminUserName:
    Type: String
    Default: admin_user

Resources:
  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: eventQueue.fifo
      VisibilityTimeout: 30
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 20
      FifoQueue: true
      ContentBasedDeduplication: true


  ArchiveTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: transactionHash
          AttributeType: S
        - AttributeName: logIndexChainId
          AttributeType: S
        - AttributeName: msgSender
          AttributeType: S
        - AttributeName: eventSig
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: transactionHash
          KeyType: HASH
        - AttributeName: logIndexChainId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI_msgSender_timestamp
          KeySchema:
            - AttributeName: msgSender
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - transactionHash
              - chainId
        - IndexName: GSI_eventSig_timestamp
          KeySchema:
            - AttributeName: eventSig
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - transactionHash
              - chainId
              - msgSender
              - topics
              - data
      TableName: !Sub "Archive"


  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: EventWebHookAPI
      StageName: "Staging"
      EndpointConfiguration: REGIONAL
      # TracingEnabled: true # 주석처리 => 유지하기 위한 최소한의 비용이 나감, 프로덕션에서 필요한 경우에만 활성화
      Cors:
        AllowMethods: "'GET, OPTIONS, POST, DELETE, PUT, PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'500'"
      Auth:
        ApiKeyRequired: true # 각 연결된 람다에서 require key 속성을 false 로 변경해야함
        AddDefaultAuthorizerToCorsPreflight: false
        AddApiKeyRequiredToCorsPreflight: false # api key 추가하고 해당 속성 때문에 하루종일 날렸음 (포스트맨에서는 정상, web 브라우저에서는 Preflight 때문에 헤더에 key 가 빠져있는 상태때문에 cors, 403 error 처럼 리턴)
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
  UsagePlanNoLimit:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - Api
      - ApiStagingStage
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: "Staging"
  UsagePlanMapReporting:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - UsagePlanNoLimit
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanNoLimit


  EventProducerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: app/dist
      Handler: app.eventProducer
      Events:
        API:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /event
            Method: post
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: false
      Environment:
        Variables:
          NODE_ENV: prod
  EventConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/dist
      Handler: app.eventConsumer
      Timeout: 30
      MemorySize: 1024
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EventQueue.Arn
            BatchSize: 10
            Enabled: true
      Environment:
        Variables:
          NODE_ENV: prod
      Policies:
        - SQSPollerPolicy:
            QueueName: EventQueue.fifo


  ## 1) Secrets Manager에 DB 자격증명 저장
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${DBClusterName}-Secret'
      Description: 'Aurora Serverless v2 (provisioned) credentials'
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username":"${DBAdminUserName}"}'
        GenerateStringKey: password
        ExcludePunctuation: true
        PasswordLength: 30

  ## 2) VPC 및 퍼블릭 서브넷
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  ## 3) 인터넷 게이트웨이 & 라우트
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AppVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRoute1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRoute2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet2
      RouteTableId: !Ref PublicRouteTable

  ## 4) 보안그룹 (퍼블릭 PostgreSQL 접근 허용)
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow PostgreSQL access
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 118.217.107.229/32

  ## 5) DB Subnet Group (퍼블릭 서브넷)
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Public subnets for Aurora'
      SubnetIds:
        - !Ref AppSubnet1
        - !Ref AppSubnet2

  ## 6) Aurora Serverless v2 클러스터 (provisioned)
  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Ref DBClusterName
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: "14.12"
      DatabaseName: !Ref DatabaseName
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}:SecretString:password}}'
      EnableHttpEndpoint: true
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0
        MaxCapacity: 4
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Port: 5432
      PerformanceInsightsEnabled: false

  ## 7) 단일 Writer 인스턴스 (퍼블릭 IP)
  AuroraInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${DBClusterName}-instance'
      DBClusterIdentifier: !Ref AuroraCluster
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      PubliclyAccessible: true
      EnablePerformanceInsights: false


  ## ── AppSync GraphQL API 정의 ──────────────────────────────────────────── ##
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub 'OrdersApi-${AWS::StackName}'
      AuthenticationType: API_KEY
      XrayEnabled: false

  GraphQLApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: app/graphql/schema.graphql

  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncInvokeLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt OrderListFunction.Arn

  ## ── Lambda 함수 정의 (OrderListFunction) ─────────────────────────────── ##
  OrderListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${DBClusterName}-order-list'
      CodeUri: app/dist           # your Lambda 코드가 있는 디렉토리
      Handler: app.rdsHandler     # 예: app/graphql/listOrders.js 의 exports.handler
      # Globals에서 VpcConfig, Runtime 등을 상속
      Environment:
        Variables:
          DB_CLUSTER_ARN: !Sub 'arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
          SECRET_ARN: !Ref DBSecret
          DB_NAME: !Ref DatabaseName
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref DBSecret
        - Statement:
            Effect: Allow
            Action:
              - rds-data:ExecuteStatement
              - rds-data:BatchExecuteStatement
              - rds-data:BeginTransaction
              - rds-data:CommitTransaction
            Resource:
              - !Sub 'arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}'
              - !Sub 'arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}/*'

  ### 2) AppSync → Lambda 호출 권한 ###
  OrderListFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt OrderListFunction.Arn
      Action: lambda:InvokeFunction
      Principal: appsync.amazonaws.com
      SourceArn: !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${GraphQLApi.ApiId}/*/Query/listOrders'

  ### 3) AppSync DataSource: 위 Lambda를 연결 ###
  OrderListDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: OrderListFunction
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt OrderListFunction.Arn
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn

  ### 4) AppSync Resolver: Query.listOrders → Lambda DataSource ###
  ListOrdersResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: OrderListDataSource   # 명시적 의존성도 걸어서 순서를 보장
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listOrders
      DataSourceName: !GetAtt OrderListDataSource.Name
      Kind: UNIT
