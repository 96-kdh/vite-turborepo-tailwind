AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: aws-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: eventQueue.fifo
      VisibilityTimeout: 30
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 20
      FifoQueue: true
      ContentBasedDeduplication: true


  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: EventWebHookAPI
      StageName: "StageN"
      EndpointConfiguration: REGIONAL
      # TracingEnabled: true # 주석처리 => 유지하기 위한 최소한의 비용이 나감, 프로덕션에서 필요한 경우에만 활성화
      Cors:
        AllowMethods: "'GET, OPTIONS, POST, DELETE, PUT, PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'500'"
      Auth:
        ApiKeyRequired: true # 각 연결된 람다에서 require key 속성을 false 로 변경해야함
        AddDefaultAuthorizerToCorsPreflight: false
        AddApiKeyRequiredToCorsPreflight: false # api key 추가하고 해당 속성 때문에 하루종일 날렸음 (포스트맨에서는 정상, web 브라우저에서는 Preflight 때문에 헤더에 key 가 빠져있는 상태때문에 cors, 403 error 처럼 리턴)
      CacheClusterEnabled: true
      CacheClusterSize: "0.5"
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
  UsagePlanNoLimit:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: "StageN"
  UsagePlanMapReporting:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanNoLimit


  EventProducerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: app/
      Handler: app.eventProducer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        API:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /event
            Method: post
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: false
      Environment:
        Variables:
          NODE_ENV: prod
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
  EventConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: app.eventConsumer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Timeout: 30
      MemorySize: 1024
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EventQueue.Arn
            BatchSize: 10
            Enabled: true
      Environment:
        Variables:
          NODE_ENV: prod
      Policies:
        - SQSPollerPolicy:
            QueueName: EventQueue.fifo
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts


  # AppSync GraphQL API (API_KEY 인증 사용)
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: OrderGraphQLApi
      AuthenticationType: API_KEY
  # API Key 생성
  GraphQLApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId

  # GraphQL 스키마 정의 (Order 타입과 4가지 Query 포함)
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        type Order {
          orderId: ID!
          chainId: Int!
          maker: String!
          taker: String
          orderStatus: Int!
          createdAt: Int!
          depositAmount: Float
          desiredAmount: Float
          timelock: Int
          updatedAt: Int
          blockNumber: Int
        }

        type Query {
          getOrder(orderId: ID!, chainId: Int!): Order
          listOrdersByMaker(maker: String!, createdAtFrom: Int, createdAtTo: Int): [Order!]!
          listOrdersByTaker(taker: String!, createdAtFrom: Int, createdAtTo: Int): [Order!]!
          listOrdersByStatus(orderStatus: Int!, createdAtFrom: Int, createdAtTo: Int): [Order!]!
        }

        schema {
          query: Query
        }

  # Lambda 함수 (확장된 Resolver 로직 구현, 컴파일된 TypeScript 코드)
  GraphQLFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: app.handler
      Runtime: nodejs18.x
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        GraphQLHTTP:
          Type: Api
          Properties:
            Path: /graphql
            Method: POST
            Auth:
              ApiKeyRequired: false
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts
  # AppSync가 Lambda를 호출할 수 있도록 하는 역할
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "AppSyncServiceRole-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt GraphQLFunction.Arn

  # AppSync 데이터 소스 (Lambda 함수 연결)
  GraphQLDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: OrderLambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GraphQLFunction.Arn
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn

  # Resolver: getOrder (주문 단건 조회)
  ResolverGetOrder:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getOrder
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "field": "$ctx.fieldName",
            "arguments": $ctx.arguments
          })
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # Resolver: listOrdersByMaker (maker 기준 주문 목록 조회)
  ResolverListOrdersByMaker:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listOrdersByMaker
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "field": "$ctx.fieldName",
            "arguments": $ctx.arguments
          })
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # Resolver: listOrdersByTaker (taker 기준 주문 목록 조회)
  ResolverListOrdersByTaker:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listOrdersByTaker
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "field": "$ctx.fieldName",
            "arguments": $ctx.arguments
          })
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  # Resolver: listOrdersByStatus (orderStatus 기준 주문 목록 조회)
  ResolverListOrdersByStatus:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listOrdersByStatus
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "field": "$ctx.fieldName",
            "arguments": $ctx.arguments
          })
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
