AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: aws-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: eventQueue.fifo
      VisibilityTimeout: 30
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 20
      FifoQueue: true
      ContentBasedDeduplication: true


  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: EventWebHookAPI
      StageName: "StageN"
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET, OPTIONS, POST, DELETE, PUT, PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'500'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        AddApiKeyRequiredToCorsPreflight: false # api key 추가하고 해당 속성 때문에 하루종일 날렸음 (포스트맨에서는 정상, web 브라우저에서는 Preflight 때문에 헤더에 key 가 빠져있는 상태때문에 cors, 403 error 처럼 리턴)
        ApiKeyRequired: true # 각 연결된 람다에서 require key 속성을 false 로 변경해야함
      # CacheClusterEnabled: true # 주석처리 => 유지하기 위한 최소한의 비용이 나감, 프로덕션에서 필요한 경우에만 활성화
      # CacheClusterSize: "0.5" # 주석처리 => 유지하기 위한 최소한의 비용이 나감, 프로덕션에서 필요한 경우에만 활성화
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
  UsagePlanNoLimit:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: "StageN"
  UsagePlanMapReporting:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanNoLimit


  EventProducerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: app/
      Handler: app.eventProducer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        API:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /event
            Method: post
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: false
      Environment:
        Variables:
          NODE_ENV: prod
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
  EventConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: app.eventConsumer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Timeout: 30
      MemorySize: 1024
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EventQueue.Arn
            BatchSize: 10
            Enabled: true
      Environment:
        Variables:
          NODE_ENV: prod
      Policies:
        - SQSPollerPolicy:
            QueueName: EventQueue.fifo
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts


  # AppSync GraphQL API (API_KEY 인증 방식)
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: ExtendedLambdaResolverApi
      AuthenticationType: API_KEY
  # API Key 생성
  GraphQLApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
  # 확장된 GraphQL 스키마 정의
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        type User {
          id: ID!
          name: String!
          age: Int
        }

        type Query {
          hello: String
          getUser(id: ID!): User
          listUsers: [User]
        }

        type Mutation {
          createUser(name: String!, age: Int): User
        }

        schema {
          query: Query
          mutation: Mutation
        }
  # Lambda 함수 (확장된 Resolver 로직 구현, 컴파일된 TypeScript 코드)
  GraphQLFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: app.handler
      Runtime: nodejs18.x
      Policies:
        - AWSLambdaBasicExecutionRole
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts
  # AppSync가 Lambda를 호출할 수 있도록 하는 역할
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "AppSyncServiceRole-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt GraphQLFunction.Arn
  # AppSync 데이터 소스로 Lambda 함수 등록
  GraphQLDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: LambdaDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GraphQLFunction.Arn
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
  # Query.hello 필드에 대한 Resolver
  ResolverHello:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: hello
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  # Query.getUser 필드에 대한 Resolver
  ResolverGetUser:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getUser
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  # Query.listUsers 필드에 대한 Resolver
  ResolverListUsers:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listUsers
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
  # Mutation.createUser 필드에 대한 Resolver
  ResolverCreateUser:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: createUser
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke"
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)
