AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: aws-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: eventQueue.fifo
      VisibilityTimeout: 30
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 20
      FifoQueue: true
      ContentBasedDeduplication: true


  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: EventWebHookAPI
      StageName: "StageN"
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET, OPTIONS, POST, DELETE, PUT, PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'500'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        AddApiKeyRequiredToCorsPreflight: false # api key 추가하고 해당 속성 때문에 하루종일 날렸음 (포스트맨에서는 정상, web 브라우저에서는 Preflight 때문에 헤더에 key 가 빠져있는 상태때문에 cors, 403 error 처럼 리턴)
        ApiKeyRequired: true # 각 연결된 람다에서 require key 속성을 false 로 변경해야함
      # CacheClusterEnabled: true # 주석처리 => 유지하기 위한 최소한의 비용이 나감, 프로덕션에서 필요한 경우에만 활성화
      # CacheClusterSize: "0.5" # 주석처리 => 유지하기 위한 최소한의 비용이 나감, 프로덕션에서 필요한 경우에만 활성화
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
  UsagePlanNoLimit:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: "StageN"
  UsagePlanMapReporting:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlanNoLimit


  EventProducerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: app/
      Handler: app.eventProducer
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Events:
        API:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /event
            Method: post
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: false
      Environment:
        Variables:
          NODE_ENV: prod
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
        - app.ts
  EventConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: app.eventConsumer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Timeout: 30
      MemorySize: 1024
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EventQueue.Arn
            BatchSize: 10
            Enabled: true
      Environment:
        Variables:
          NODE_ENV: prod
      Policies:
        - SQSPollerPolicy:
            QueueName: EventQueue.fifo
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts
