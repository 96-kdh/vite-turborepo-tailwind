type Order {
    orderStatus: Int!
    encodedCompositeKey: String!

    chainId: Int!
    dstChainId: Int!
    maker: String
    createdAt: Int!

    orderId: ID!
    taker: String
    depositAmount: Float
    desiredAmount: Float
    updatedAt: Int
    blockNumber: Int
}

type PaginatedOrders {
    items: [Order!]!
    nextToken: String
}

type Query {
    getOrder(orderStatus: ID!, encodedCompositeKey: Int!, nextToken: String, limit: Int): Order
    listOrders(nextToken: String, limit: Int): PaginatedOrders!
    listOrdersByChainId(orderStatus: Int!, chainId: Int!, nextToken: String, limit: Int): PaginatedOrders!
    listOrdersByCreatedAt(orderStatus: Int!, createdAtFrom: Int!, createdAtTo: Int!, nextToken: String, limit: Int): PaginatedOrders!
    listOrdersByDstChainId(orderStatus: Int!, dstChainId: Int!, nextToken: String, limit: Int): PaginatedOrders!
    listOrdersByMaker(orderStatus: Int!, maker: String!, nextToken: String, limit: Int): PaginatedOrders!
}

schema {
    query: Query
}
