import { task } from "hardhat/config";
import { spawn, spawnSync } from "child_process";
import WebSocket from "ws";

import { contractAddresses, EndpointIds, SupportChainIds } from "../constants";
import { ethers } from "ethers";
import { beforeTaskAction, encodePayloadViem } from "../utils";
import { parseEther } from "viem";
import { Options } from "@layerzerolabs/lz-v2-utilities";
import hre from "hardhat";

enum Task {
   dev = "dev", // only run local
   mining = "mining", // only run local

   subscribe = "subscribe",
   createOrder = "createOrder",
}

// npx hardhat dev
task(Task.dev, "override npx hardhat node task").setAction(async (taskArgs, hre) => {
   if (hre.network.config.chainId !== SupportChainIds.LOCALHOST) {
      throw new Error("only run local");
   }

   console.log("\nüöÄ Hardhat ÎÖ∏ÎìúÎ•º Ïã§ÌñâÌï©ÎãàÎã§...");

   const hardhatProcess = spawn("npx", ["hardhat", "node"], {
      stdio: "inherit", // ‚úÖ Î∂ÄÎ™® ÌîÑÎ°úÏÑ∏Ïä§Ïùò stdout/stderrÏùÑ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
      shell: true, // ‚úÖ ÏâòÏùÑ ÌÜµÌï¥ Ïã§Ìñâ
   });

   (function nodeHealthChecker() {
      const ws = new WebSocket("ws://localhost:8545");

      ws.on("open", async () => {
         console.log("‚úÖ hardhat node Ïù∏ÏãùÏôÑÎ£å, 1s block ÏÉùÏÑ±ÏùÑ ÏãúÏûëÌï©ÎãàÎã§.");

         spawnSync("npx", ["hardhat", Task.mining, "--network", "localhost"], {
            stdio: "inherit",
            shell: true,
         });

         console.log("‚úÖ 1s block ÏÉùÏÑ± ÏôÑÎ£å, ignition ÏúºÎ°ú Ïª®Ìä∏ÎûôÌä∏Î•º Î∞∞Ìè¨Ìï©ÎãàÎã§.");

         spawnSync(
            "npx",
            [
               "hardhat",
               "ignition",
               "deploy",
               "ignition/modules/helper/lz/EndpointV2Mock.passiveReceivePayload.ts",
               "--network",
               "localhost",
            ],
            {
               stdio: "inherit",
               shell: true,
            },
         );

         spawnSync(
            "npx",
            ["hardhat", "ignition", "deploy", "ignition/modules/orderBook/OrderBook.lz.ts", "--network", "localhost"],
            {
               stdio: "inherit",
               shell: true,
            },
         );

         console.log("‚úÖ ignition ÏúºÎ°ú Ïª®Ìä∏ÎûôÌä∏ Î∞∞Ìè¨Î•º ÎßàÏ≥§ÏäµÎãàÎã§.");

         spawnSync("npx", ["hardhat", "subscribe"], {
            stdio: "inherit",
            shell: true,
         });
      });

      ws.on("error", (err: { message: string }) => {
         console.error("‚ùå hardhat node Ïù∏Ïãù Ïã§Ìå®, ", err.message);
         setTimeout(nodeHealthChecker, 1000);
      });
   })();

   await new Promise((resolve) => {
      hardhatProcess.on("close", resolve); // Hardhat Ï¢ÖÎ£åÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
   });
});

// npx hardhat mining
task(Task.mining, "run hardhat node mining")
   .addOptionalParam("interval", "mining interval(ms)", "1000")
   .setAction(async ({ interval }, hre) => {
      if (hre.network.config.chainId !== SupportChainIds.LOCALHOST) {
         throw new Error("only run local");
      }

      console.log(`${interval}ms Î∏îÎ°ùÏÉùÏÑ± ÏãúÏûë`);
      await hre.network.provider.send("evm_setIntervalMining", [Number(interval)]);
   });

// npx hardhat subscribe
task(Task.subscribe, "run hardhat node subscribing").setAction(async (taskArgs, hre) => {
   if (hre.network.config.chainId !== SupportChainIds.LOCALHOST) {
      throw new Error("only run local");
   }

   const provider = new ethers.WebSocketProvider("ws://localhost:8545");

   const abi = [
      "event CreateOrder(uint256 indexed orderId)",
      "event UpdateSrcOrder(uint256 indexed orderId, address indexed maker, address taker, uint256 depositAmount, uint256 desiredAmount, uint256 timelock, uint8 orderStatus)",
      "event UpdateDstOrder(bytes32 indexed orderId, address indexed maker, address taker, uint256 depositAmount, uint256 desiredAmount, uint256 timelock, uint8 orderStatus)",
   ];

   const contractAddress = contractAddresses[hre.network.config.chainId].OrderBookWithLzA;
   const contract = new ethers.Contract(contractAddress, abi, provider);
   const baseContract = new ethers.BaseContract(contractAddress, abi, provider);

   await baseContract.on("CreateOrder", (event) => {
      console.log("UpdateSrcOrder Ïù¥Î≤§Ìä∏ Í∞êÏßÄÎê®!12");
      console.log(event);
   });

   console.log("baseContract.on");

   await contract.on("UpdateSrcOrder", (event) => {
      console.log("UpdateSrcOrder Ïù¥Î≤§Ìä∏ Í∞êÏßÄÎê®!23");
      console.log(event);
   });

   console.log("contract.on");
});

// npx hardhat createOrder
task(Task.createOrder, "createOrder").setAction(async (taskArgs, hre) =>
   beforeTaskAction(taskArgs, hre, async () => {
      const chainId = hre.network.config.chainId as SupportChainIds;
      const [ownerA] = await hre.viem.getWalletClients();

      console.log("ownerA: ", ownerA.account.address);
      console.log("address: ", contractAddresses[chainId].OrderBookWithLzA);

      const OrderBookWithLz = await hre.viem.getContractAt(
         "OrderBookWithLz",
         contractAddresses[chainId].OrderBookWithLzA,
      );

      const depositAmount = parseEther("1");
      const desiredAmount = parseEther("2");

      const { CreateOrder } = encodePayloadViem();

      // LayerZero Ïã§Ìñâ ÏòµÏÖò
      const options = Options.newOptions().addExecutorLzReceiveOption(200000, 0).toHex().toString();
      const createPayload = CreateOrder({
         orderId: 0n,
         sender: ownerA.account.address,
         srcEid: EndpointIds.LOCALHOST__A,
         depositAmount,
         dstEid: EndpointIds.LOCALHOST__B,
         desiredAmount,
      });

      // ÌÅ¨Î°úÏä§Ï≤¥Ïù∏ ÏàòÏàòÎ£å Í≤¨Ï†Å
      const { nativeFee } = (await OrderBookWithLz.read.quote([
         EndpointIds.LOCALHOST__B,
         createPayload,
         options,
         false,
      ])) as {
         nativeFee: bigint;
         lzTokenFee: bigint;
      };

      console.log("nativeFee: ", nativeFee);

      await OrderBookWithLz.write.createOrder([EndpointIds.LOCALHOST__B, depositAmount, desiredAmount, options], {
         value: depositAmount + nativeFee,
      });
   }),
);
